## OAuthTokenRequest Function

The OAuthTokenRequest function is designed to simplify the process of making OAuth token requests by encapsulating the required logic for constructing and sending requests. This function supports various request configurations and handles common headers and data formats.

### Parameters

The OAuthTokenRequest function accepts the following parameters:

- secret (string, required): The client secret for authentication.
- clienID (string, required): The client ID for authentication.
- url (string, required): The URL to send the token request to. It should support HTTPS.
- body (object, required): The request body containing parameters required for token acquisition.
- method (string, required): The HTTP method for the request (e.g., 'POST').
- headers (array, optional): An array of header objects containing key (string) and value (string) pairs.

### Response

The function returns a Promise that resolves to the parsed JSON response from the token request. If the response does not contain an access_token property, an error will be thrown.

### How it works

1. The parseMapVariables function takes an array of objects (headers) and converts it into a single object where each object's key becomes a property in the new object, with the corresponding value.

2. The OAuthTokenRequest function is defined. It is an asynchronous function that takes a configuration object as an argument. This configuration object includes various properties such as secret, clienID, url, body, method, and headers.

3. Inside the OAuthTokenRequest function:

- The parseMapVariables function is used to convert the body and headers arrays into objects, which will be used later.
- Default headers for the request are set. If the Content-Type header is not provided, it is set to 'application/json'. Similarly, if the Accept header is not provided, it is set to 'application/json'.
- The url is checked and modified to include 'https://' if it doesn't start with 'http'.
- Depending on the Content-Type header, the requestData is converted to a URL-encoded string or JSON string.
- The options object is constructed with the method, headers, and body for the fetch request.
- The fetch function is used to make an HTTP request to the specified url with the provided options.
- The response is parsed as JSON using response.json().
- If the response JSON does not contain an access_token property, an error is logged and thrown.
- The OAuthTokenRequest function is exported as the default export of the module.

In summary, the OAuthTokenRequest function simplifies the process of making OAuth token requests. It constructs the necessary request headers, formats the request data, makes the request using the fetch API, and handles the response by parsing it as JSON. The function also ensures that an access_token property is present in the response and throws an error if it's not found. This code is meant to be used as a utility for making OAuth token requests in JavaScript applications.

## SendEmailViaMSGraph Function

The `SendEmailViaMSGraph` function facilitates sending emails using the Microsoft Graph API. It constructs and sends emails, allowing you to specify various email details, recipients, attachments, and more.

### Parameters

The SendEmailViaMSGraph function accepts the following parameters:

- log (boolean, optional): Enable or disable logging for debugging purposes.
- accessToken (string, required): Access token for authenticating with the Microsoft Graph API.
- sendFromEmail (string, required): Email address of the sender.
- sendFromName (string, required): Display name of the sender.
- subject (string, required): Subject of the email.
- recipients (array of objects, required): Array of recipient objects, where each object contains key (recipient name) and value (recipient email address).
- ccRecipients (array of objects, optional): Array of CC recipient objects, similar to recipients.
- bccRecipients (array of objects, optional): Array of BCC recipient objects, similar to recipients.
- bodyContentType (string, required): Content type of the email body ('text/plain' or 'text/html').
- body (string, required): Content of the email body.
- attachments (array of objects, optional): Array of attachment objects, where each object contains key (attachment filename) and value (base64-encoded attachment content).

### Response

The function returns a Promise that resolves to an object indicating the status of the email sending process. The returned object has a property as containing the HTTP status code of the response from the Microsoft Graph API.

### How it works

1. The repientsJson, ccJson, and bccJson arrays are constructed by invoking the buildRecipients function on the recipients, ccRecipients, and bccRecipients arrays, respectively.
2. The checkBearerToken function is used to ensure that the accessToken starts with "Bearer " and adjust it if necessary.
3. The sender's emailDomain is extracted using a regex pattern and used to create a userPrincipalName for the sender.
   The emailDomain is extracted from the sendFromEmail using a regular expression (emailDomainRegex). This gives you the domain part of the email address (e.g., 'bettyblocks' from 'user@bettyblocks.com').The userPrincipalName is constructed by replacing the extracted emailDomain with the same emailDomain plus .onmicrosoft. This effectively changes the domain part of the email address to the required format for the Microsoft Graph API (e.g., 'user@bettyblocks.onmicrosoft.com').
4. The apiUrl is constructed using the userPrincipalName.
5. An array attachmentsJson is populated by iterating through the attachments array, converting each attachment's data to a specific format if it has a valid MIME type.
6. The requestBody object is constructed with various properties, including the sender, message details, recipients, and attachments.
7. The options object is created with the necessary headers and request body for the fetch request.
8. The fetch function is used to send a POST request to the Microsoft Graph API using the constructed URL and options.
9. The function returns an object with a property as containing the HTTP status code of the response.

In essence, the function constructs the necessary request data, headers, and options, sends the request using the fetch API, and handles the response. The omitted "if log is true" steps involve logging information for debugging purposes and can be removed if logging is not needed. This code is meant to be used as a utility for sending emails through the Microsoft Graph API in JavaScript applications.
